#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_UniformRangedFloat004_Minimum;
	float Constants_Emitter_UniformRangedFloat004_Maximum;
	int Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float Constants_Emitter_UniformRangedFloat005_Minimum;
	float Constants_Emitter_UniformRangedFloat005_Maximum;
	int Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float Constants_Emitter_UniformRangedFloat002_Minimum;
	float Constants_Emitter_UniformRangedFloat002_Maximum;
	int Constants_Emitter_UniformRangedFloat002_RandomSeed;
	float4 Constants_Emitter_InitializeParticle_Color;
	float Constants_Emitter_InitializeParticle_Mass;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	int Constants_Emitter_BoxLocation_RandomSeed;
	float Constants_Emitter_BoxLocation_SurfaceOnlyBandThickness;
	float3 Constants_Emitter_BoxLocation_BoxSize;
	float3 Constants_Emitter_BoxLocation_BoxOffset;
	float Constants_Emitter_BoxLocation_NormalizedBoxRotationAngle;
	float3 Constants_Emitter_BoxLocation_RotateBoxOnAxis;
	int Constants_Emitter_BoxLocation_SpawnGroupMask;
	int Constants_Emitter_SphereLocation_RandomSeed;
	float Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	float Constants_Emitter_SphereLocation_SphereRadius;
	float3 Constants_Emitter_SphereLocation_NonUniformScale;
	float3 Constants_Emitter_SphereLocation_Offset;
	int Constants_Emitter_SphereLocation_SpawnGroupMask;
	float3 Constants_Emitter_UniformRangedVector_Minimum;
	float3 Constants_Emitter_UniformRangedVector_Maximum;
	int Constants_Emitter_UniformRangedVector_RandomSeed;
	float3 Constants_Emitter_AddVelocity_ScaleAddedVelocity;
	float3 Constants_Emitter_GravityForce001_Gravity;
	float Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float3 Constants_Emitter_InitialMeshOrientation_OrientationVector;
	float3 Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	float3 Constants_Emitter_InitialMeshOrientation_Rotation;
	float Constants_Emitter_Drag_Drag;
	float Constants_Emitter_Drag_RotationalDrag;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float3 Constants_Emitter_GravityForce_Gravity;
	float3 Constants_Emitter_WindForce_WindSpeed;
	float Constants_Emitter_WindForce_WindSpeedScale;
	float Constants_Emitter_WindForce_AirResistance;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Constants_Emitter_UniformRangedFloat004_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat004_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat005_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat005_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat002_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat002_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat002_RandomSeed;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	int PREV_Constants_Emitter_BoxLocation_RandomSeed;
	float PREV_Constants_Emitter_BoxLocation_SurfaceOnlyBandThickness;
	float3 PREV_Constants_Emitter_BoxLocation_BoxSize;
	float3 PREV_Constants_Emitter_BoxLocation_BoxOffset;
	float PREV_Constants_Emitter_BoxLocation_NormalizedBoxRotationAngle;
	float3 PREV_Constants_Emitter_BoxLocation_RotateBoxOnAxis;
	int PREV_Constants_Emitter_BoxLocation_SpawnGroupMask;
	int PREV_Constants_Emitter_SphereLocation_RandomSeed;
	float PREV_Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	float PREV_Constants_Emitter_SphereLocation_SphereRadius;
	float3 PREV_Constants_Emitter_SphereLocation_NonUniformScale;
	float3 PREV_Constants_Emitter_SphereLocation_Offset;
	int PREV_Constants_Emitter_SphereLocation_SpawnGroupMask;
	float3 PREV_Constants_Emitter_UniformRangedVector_Minimum;
	float3 PREV_Constants_Emitter_UniformRangedVector_Maximum;
	int PREV_Constants_Emitter_UniformRangedVector_RandomSeed;
	float3 PREV_Constants_Emitter_AddVelocity_ScaleAddedVelocity;
	float3 PREV_Constants_Emitter_GravityForce001_Gravity;
	float PREV_Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_OrientationVector;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_Rotation;
	float PREV_Constants_Emitter_Drag_Drag;
	float PREV_Constants_Emitter_Drag_RotationalDrag;
	float PREV_Constants_Emitter_FloatFromCurve_ScaleCurve;
	float PREV_Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 PREV_Constants_Emitter_ScaleColor_ScaleRGB;
	float3 PREV_Constants_Emitter_GravityForce_Gravity;
	float3 PREV_Constants_Emitter_WindForce_WindSpeed;
	float PREV_Constants_Emitter_WindForce_WindSpeedScale;
	float PREV_Constants_Emitter_WindForce_AirResistance;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_WindForce
{
	float AirResistance;
	float3 WindSpeed;
	float WindSpeedScale;
};

struct FParamMap0_Vector2DFromFloat002
{
	float Value;
};

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	float3 PhysicsRotationalForce;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SpriteSizeScale
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_SphereLocation
{
	int CoordinateSpace;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	bool HemisphereZ;
	float3 NonUniformScale;
	bool NormalizeThickness;
	float3 Offset;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	float3 SphereOrigin;
	float SphereRadius;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float2 SpriteSize;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float RotationalInertia;
	float3 RotationalVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_WindForce
{
	bool IsAffectedByWind;
};

struct FParamMap0_OUTPUT_VAR_SphereLocation
{
	float3 SphereNormal;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_BoxLocation
{
	float3 BoxNormal;
	float3 BoxVector;
};

struct FParamMap0_OUTPUT_VAR_ApplyInitialForces
{
	float3 IncomingPhysicsForce;
	float3 IncomingPhysicsRotationalForce;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ApplyInitialForces ApplyInitialForces;
	FParamMap0_OUTPUT_VAR_BoxLocation BoxLocation;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SphereLocation SphereLocation;
	FParamMap0_OUTPUT_VAR_WindForce WindForce;
};

struct FParamMap0_NormalizedAngleToDegrees001
{
	float NormalizedAngle;
};

struct FParamMap0_Local_WindForce
{
	float3 RawWindForce;
	float3 WindForce;
};

struct FParamMap0_Local_SphereLocation
{
	float3 SphereVector;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_InitialMeshOrientation
{
	bool Temp;
};

struct FParamMap0_Local_BoxLocation
{
	float3 BoxVector;
};

struct FParamMap0_Local
{
	FParamMap0_Local_BoxLocation BoxLocation;
	FParamMap0_Local_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SphereLocation SphereLocation;
	FParamMap0_Local_WindForce WindForce;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitialMeshOrientation
{
	float3 OrientationAxis;
	int OrientationCoordinateSpace;
	float3 OrientationVector;
	float3 Rotation;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce001
{
	float3 Gravity;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_WindForce
{
	float AirResistance;
	float3 WindSpeed;
	float WindSpeedScale;
};

struct FParamMap0_Constants_Emitter_UniformRangedVector
{
	float3 Maximum;
	float3 Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat005
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat004
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat002
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SphereLocation
{
	float3 NonUniformScale;
	float3 Offset;
	int RandomSeed;
	int SpawnGroupMask;
	float SphereRadius;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_InitialMeshOrientation
{
	float3 OrientationAxis;
	float3 OrientationVector;
	float3 Rotation;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float Mass;
	float3 MeshScale;
};

struct FParamMap0_Constants_Emitter_GravityForce001
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_Constants_Emitter_BoxLocation
{
	float3 BoxOffset;
	float3 BoxSize;
	float NormalizedBoxRotationAngle;
	int RandomSeed;
	float3 RotateBoxOnAxis;
	int SpawnGroupMask;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_Constants_Emitter_ApplyInitialForces
{
	float PositionalForceWarmupTime;
};

struct FParamMap0_Constants_Emitter_AddVelocity
{
	float3 ScaleAddedVelocity;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_AddVelocity AddVelocity;
	FParamMap0_Constants_Emitter_ApplyInitialForces ApplyInitialForces;
	FParamMap0_Constants_Emitter_BoxLocation BoxLocation;
	FParamMap0_Constants_Emitter_Drag Drag;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_GravityForce GravityForce;
	FParamMap0_Constants_Emitter_GravityForce001 GravityForce001;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_SphereLocation SphereLocation;
	FParamMap0_Constants_Emitter_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_Constants_Emitter_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_Constants_Emitter_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_Constants_Emitter_UniformRangedVector UniformRangedVector;
	FParamMap0_Constants_Emitter_WindForce WindForce;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_BoxLocation
{
	float3 BoxOffset;
	float3 BoxOrigin;
	float3 BoxSize;
	int CoordinateSpace;
	bool FixedRandomSeed;
	float NormalizedBoxRotationAngle;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float3 RotateBoxOnAxis;
	int SpawnGroupMask;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_ApplyInitialForces
{
	bool ApplyForcetoPosition;
	bool ApplyForcetoVelocity;
	bool ApplyRotationalForcetoRotationalVelocity;
	float PositionalForceWarmupTime;
};

struct FParamMap0_AddVelocity
{
	int CoordinateSpace;
	float3 ScaleAddedVelocity;
	float3 Velocity;
};

struct FParamMap0
{
	FParamMap0_AddVelocity AddVelocity;
	FParamMap0_ApplyInitialForces ApplyInitialForces;
	FParamMap0_BoxLocation BoxLocation;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_GravityForce001 GravityForce001;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_NormalizedAngleToDegrees001 NormalizedAngleToDegrees001;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SphereLocation SphereLocation;
	FParamMap0_SpriteSizeScale SpriteSizeScale;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UniformRangedVector UniformRangedVector;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
	FParamMap0_Vector2DFromFloat002 Vector2DFromFloat002;
	FParamMap0_WindForce WindForce;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat002_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void Vector2DFromFloat002_Emitter_Func_(out float2 Out_Vec2, inout FSimulationContext Context);
void NormalizedAngleToDegrees001_Emitter_Func_(out float Out_NewOutput, inout FSimulationContext Context);
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void RandomPointInBox_SurfaceOnly_false_Func_(float3 In_Size, bool In_Center, float In_SurfaceThickness, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Output, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void BoxLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void IsolateLongestVectorComponent_Func_(float3 In_VECTOR_VAR, out float3 Out_Result, inout FSimulationContext Context);
void BoxLocation_Emitter_Func_(inout FSimulationContext Context);
void RandomPointInSphere_Func_(float In_InnerRadius, float In_OuterRadius, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Ouput, inout FSimulationContext Context);
void CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(bool In_X, bool In_Y, bool In_Z, out float3 Out_Output);
void SphereLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void SphereLocation_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context);
void AddVelocity_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AddVelocity_Emitter_Func_(inout FSimulationContext Context);
void GravityForce001_Emitter_Func_(inout FSimulationContext Context);
void ApplyInitialForces_Emitter_Func_(inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void InitialMeshOrientation_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result);
void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context);
void AxisAngleToQuaternion_Func_(float4 In_AxisAngle, bool In_NormalizeAxis, out float4 Out_Quaternion, inout FSimulationContext Context);
void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result);
void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context);
void ApplyRotationVector_NormalizeRotations_true_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context);
void InitialMeshOrientation_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void Drag_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueScaleFactorFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void Vector2DFromFloat_Emitter_Func_(out float2 Out_Vec2, inout FSimulationContext Context);
void SpriteSizeScale_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void WindForce_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant25 = false;
	int Constant26 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant26);
	bool Result1 = Constant25 && Result;
	int Constant27 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant27);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant28 = 0;
	int Constant29 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant28;
	Seed3_IfResult = Constant29;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant30 = -1;
	int Constant31 = -1;
	int Constant32 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant30;
	Seed2_IfResult1 = Constant31;
	Seed3_IfResult1 = Constant32;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant21 = (0);
	bool Constant22 = false;
	int Constant23 = 0;
	int Constant24 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant21, In_OverrideSeed, Constant23, Constant24, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant19 = 0;
	bool Constant20 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.UniformRangedFloat004.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.UniformRangedFloat004.RandomnessMode;
	Override_IfResult = Context.MapSpawn.UniformRangedFloat004.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant19;
	Override_IfResult = Constant20;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result;
}

void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant36 = 0;
	bool Constant37 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.UniformRangedFloat005.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.UniformRangedFloat005.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.UniformRangedFloat005.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant36;
	Override_IfResult1 = Constant37;
	}
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed, RandomRangeFloat_Func_Output_Result1, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result1;
}

void UniformRangedFloat002_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant42 = 0;
	bool Constant43 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.MapSpawn.UniformRangedFloat002.OverrideRandomness)
	{
	Mode_IfResult2 = Context.MapSpawn.UniformRangedFloat002.RandomnessMode;
	Override_IfResult2 = Context.MapSpawn.UniformRangedFloat002.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant42;
	Override_IfResult2 = Constant43;
	}
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.MapSpawn.UniformRangedFloat002.FixedRandomSeed, RandomRangeFloat_Func_Output_Result2, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result2;
}

void Vector2DFromFloat002_Emitter_Func_(out float2 Out_Vec2, inout FSimulationContext Context)
{
	float2 Output11;
	Output11.x = Context.MapSpawn.Vector2DFromFloat002.Value;
	Output11.y = Context.MapSpawn.Vector2DFromFloat002.Value;
	Out_Vec2 = Output11;
}

void NormalizedAngleToDegrees001_Emitter_Func_(out float Out_NewOutput, inout FSimulationContext Context)
{
	float Constant47 = 360;
	float Result8 = Context.MapSpawn.NormalizedAngleToDegrees001.NormalizedAngle * Constant47;
	Out_NewOutput = Result8;
}

void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant50 = false;
	float3 Constant51 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant50)
	{
	Vector_IfResult = Constant51;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant55 = false;
	float3 Constant56 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant55)
	{
	Vector_IfResult1 = Constant56;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant63 = (0);
	bool Constant64 = false;
	int Constant65 = 0;
	int Constant66 = (0);
	bool Constant67 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant63, In_OverrideSeed, Constant65, Constant66, Constant67, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float Result9 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float Result10 = rand_float(Result9, Seed11, Seed21, Seed31);
	float Result11 = rand_float(Result9);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result10;
	}
	else
	{
	Random_IfResult1 = Result11;
	}
	float Result12 = In_Min + Random_IfResult1;
	Out_Result = Result12;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant82 = (0);
	bool Constant83 = false;
	int Constant84 = 0;
	int Constant85 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant82, In_OverrideSeed, Constant84, Constant85, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2, Context);
	float3 Result17 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed3;
	float3 Result18 = rand_float(Result17, Seed12, Seed22, Seed32);
	float3 Result19 = rand_float(Result17);
	float3 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result18;
	}
	else
	{
	Random_IfResult2 = Result19;
	}
	float3 Result20 = In_Min + Random_IfResult2;
	Out_Result = Result20;
}

void RandomPointInBox_SurfaceOnly_false_Func_(float3 In_Size, bool In_Center, float In_SurfaceThickness, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Output, inout FSimulationContext Context)
{
	float Constant80 = -0.5;
	float3 Constant81 = float3(0,0,0);
	float3 RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Constant81, In_Size, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result4, Context);
	float3 Result21 = In_Size * Constant80 + RandomRangeFloat_Func_Output_Result4;
	float3 Vector_IfResult2;
	if(In_Center)
	{
	Vector_IfResult2 = Result21;
	}
	else
	{
	Vector_IfResult2 = RandomRangeFloat_Func_Output_Result4;
	}
	Out_Output = Vector_IfResult2;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant89 = 0;
	bool Result23 = NiagaraAll(In_SourceSpace == Constant89);
	int Constant90 = 0;
	bool Result24 = NiagaraAll(In_DestinationSpace == Constant90);
	bool Result25 = Result23 && Result24;
	int Constant91 = 1;
	bool Result26 = NiagaraAll(In_SourceSpace == Constant91);
	int Constant92 = 1;
	bool Result27 = NiagaraAll(In_DestinationSpace == Constant92);
	bool Result28 = Result26 && Result27;
	bool Result29 = Result25 || Result28;
	int Constant93 = 2;
	bool Result30 = NiagaraAll(In_SourceSpace == Constant93);
	int Constant94 = 2;
	bool Result31 = NiagaraAll(In_DestinationSpace == Constant94);
	bool Result32 = Result30 && Result31;
	bool Result33 = Result29 || Result32;
	bool Result34 = Result23 && Result31;
	bool Result35 = Result30 && Result24;
	bool Result36 = Result34 || Result35;
	bool Result37 = In_bLocalSpace && Result36;
	bool Result38 = Result33 || Result37;
	bool Result39 = !In_bLocalSpace;
	bool Result40 = Result23 && Result27;
	bool Result41 = Result26 && Result24;
	bool Result42 = Result40 || Result41;
	bool Result43 = Result39 && Result42;
	bool Result44 = Result38 || Result43;
	bool Result45 = In_bLocalSpace && Result40;
	bool Result46 = Result30 && Result27;
	bool Result47 = Result45 || Result46;
	bool Result48 = Result39 && Result35;
	bool Result49 = Result47 || Result48;
	float4x4 Matrix_IfResult1;
	if(Result49)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result44;
	Out_OutTransform = Matrix_IfResult1;
}

void BoxLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant88 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant88, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result50 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult3;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult3 = In_InVector;
	}
	else
	{
	Vector_IfResult3 = Result50;
	}
	Out_OutVector = Vector_IfResult3;
}

void IsolateLongestVectorComponent_Func_(float3 In_VECTOR_VAR, out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result52 = abs(In_VECTOR_VAR);
	float X1;
	float Y1;
	float Z1;
	X1 = Result52.x;
	Y1 = Result52.y;
	Z1 = Result52.z;
	bool Result53 = NiagaraAll(X1 > Y1);
	bool Result54 = NiagaraAll(X1 > Z1);
	bool Result55 = Result53 && Result54;
	float3 Constant95 = float3(1,0,0);
	float3 Constant96 = float3(1,1,1);
	float3 Vector_IfResult4;
	if(Result55)
	{
	Vector_IfResult4 = Constant95;
	}
	else
	{
	Vector_IfResult4 = Constant96;
	}
	bool Result56 = NiagaraAll(Y1 > X1);
	bool Result57 = NiagaraAll(Y1 > Z1);
	bool Result58 = Result56 && Result57;
	float3 Constant97 = float3(0,1,0);
	float3 Constant98 = float3(1,1,1);
	float3 Vector_IfResult5;
	if(Result58)
	{
	Vector_IfResult5 = Constant97;
	}
	else
	{
	Vector_IfResult5 = Constant98;
	}
	float3 Result59 = Vector_IfResult4 * Vector_IfResult5;
	bool Result60 = NiagaraAll(Z1 > X1);
	bool Result61 = NiagaraAll(Z1 > Y1);
	bool Result62 = Result60 && Result61;
	float3 Constant99 = float3(0,0,1);
	float3 Constant100 = float3(1,1,1);
	float3 Vector_IfResult6;
	if(Result62)
	{
	Vector_IfResult6 = Constant99;
	}
	else
	{
	Vector_IfResult6 = Constant100;
	}
	float3 Result63 = Result59 * Vector_IfResult6;
	float3 Result64 = In_VECTOR_VAR * Result63;
	Out_Result = Result64;
}

void BoxLocation_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result13 = Context.MapSpawn.Constants.Emitter.BoxLocation.SurfaceOnlyBandThickness * Context.MapSpawn.BoxLocation.SurfaceExpansionMode + Context.MapSpawn.Constants.Emitter.BoxLocation.BoxSize;
	bool Constant75 = true;
	float Constant76 = 0;
	float X;
	float Y;
	float Z;
	X = Result13.x;
	Y = Result13.y;
	Z = Result13.z;
	float Result14 = max(max(X, Y), Z);
	float Constant77 = 0.5;
	float Result15 = Result14 * Constant77;
	float Result16 = clamp(Context.MapSpawn.Constants.Emitter.BoxLocation.SurfaceOnlyBandThickness,Constant76,Result15);
	int Constant78 = 0;
	bool Constant79 = false;
	int Mode_IfResult3;
	bool Override_IfResult3;
	if(Context.MapSpawn.BoxLocation.OverrideRandomness)
	{
	Mode_IfResult3 = Context.MapSpawn.BoxLocation.RandomnessMode;
	Override_IfResult3 = Context.MapSpawn.BoxLocation.OverrideSeed;
	}
	else
	{
	Mode_IfResult3 = Constant78;
	Override_IfResult3 = Constant79;
	}
	float3 RandomPointInBox_SurfaceOnly_false_Func_Output_Output;
	RandomPointInBox_SurfaceOnly_false_Func_(Result13, Constant75, Result16, Mode_IfResult3, Override_IfResult3, Context.MapSpawn.Constants.Emitter.BoxLocation.RandomSeed, Context.MapSpawn.BoxLocation.FixedRandomSeed, RandomPointInBox_SurfaceOnly_false_Func_Output_Output, Context);
	Context.MapSpawn.Local.BoxLocation.BoxVector = RandomPointInBox_SurfaceOnly_false_Func_Output_Output;
	float3 Result22 = Context.MapSpawn.Constants.Emitter.BoxLocation.BoxOffset + Context.MapSpawn.Local.BoxLocation.BoxVector;
	Context.MapSpawn.Local.BoxLocation.BoxVector = Result22;
	int Constant86 = 0;
	bool Constant87 = true;
	float3 BoxLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	BoxLocation_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Local.BoxLocation.BoxVector, Context.MapSpawn.BoxLocation.CoordinateSpace, Constant86, Constant87, BoxLocation_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result51 = BoxLocation_NF_TransformVector_Emitter_Func_Output_OutVector + Context.MapSpawn.BoxLocation.BoxOrigin;
	float3 IsolateLongestVectorComponent_Func_Output_Result;
	IsolateLongestVectorComponent_Func_(BoxLocation_NF_TransformVector_Emitter_Func_Output_OutVector, IsolateLongestVectorComponent_Func_Output_Result, Context);
	Context.MapSpawn.Particles.Position = Result51;
	Context.MapSpawn.OUTPUT_VAR.BoxLocation.BoxVector = BoxLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	Context.MapSpawn.OUTPUT_VAR.BoxLocation.BoxNormal = IsolateLongestVectorComponent_Func_Output_Result;
}

void RandomPointInSphere_Func_(float In_InnerRadius, float In_OuterRadius, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Constant116 = 0;
	float Constant117 = -1;
	float Constant118 = 3;
	float Result65 = pow(In_InnerRadius,Constant118);
	float3 Output12;
	Output12.x = Constant116;
	Output12.y = Constant117;
	Output12.z = Result65;
	float Result66 = TWO_PI;
	float Constant119 = 1;
	float Constant120 = 3;
	float Result67 = pow(In_OuterRadius,Constant120);
	float3 Output13;
	Output13.x = Result66;
	Output13.y = Constant119;
	Output13.z = Result67;
	float3 RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Output12, Output13, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result5, Context);
	float Phi;
	float CosASC40ThetaASC41;
	float RASC943;
	Phi = RandomRangeFloat_Func_Output_Result5.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result5.y;
	RASC943 = RandomRangeFloat_Func_Output_Result5.z;
	float Result68 = cos(Phi);
	float Result69 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result70 = 1 - Result69;
	float Result71 = sqrt(Result70);
	float Result72 = Result68 * Result71;
	float Result73 = sin(Phi);
	float Result74 = Result73 * Result71;
	float3 Output14;
	Output14.x = Result72;
	Output14.y = Result74;
	Output14.z = CosASC40ThetaASC41;
	float Constant121 = 0.333333;
	float Result75 = pow(RASC943,Constant121);
	float3 Result76 = Output14 * Result75;
	Out_Ouput = Result76;
}

void CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(bool In_X, bool In_Y, bool In_Z, out float3 Out_Output)
{

Out_Output = float3(In_X, In_Y, In_Z);
}

void SphereLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant124 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant124, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result81 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult7;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult7 = In_InVector;
	}
	else
	{
	Vector_IfResult7 = Result81;
	}
	Out_OutVector = Vector_IfResult7;
}

void SphereLocation_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant112 = 0;
	float Constant113 = 1;
	int Constant114 = 0;
	bool Constant115 = false;
	int Mode_IfResult4;
	bool Override_IfResult4;
	if(Context.MapSpawn.SphereLocation.OverrideRandomness)
	{
	Mode_IfResult4 = Context.MapSpawn.SphereLocation.RandomnessMode;
	Override_IfResult4 = Context.MapSpawn.SphereLocation.OverrideSeed;
	}
	else
	{
	Mode_IfResult4 = Constant114;
	Override_IfResult4 = Constant115;
	}
	float3 RandomPointInSphere_Func_Output_Ouput;
	RandomPointInSphere_Func_(Constant112, Constant113, Mode_IfResult4, Override_IfResult4, Context.MapSpawn.Constants.Emitter.SphereLocation.RandomSeed, Context.MapSpawn.SphereLocation.FixedRandomSeed, RandomPointInSphere_Func_Output_Ouput, Context);
	Context.MapSpawn.Local.SphereLocation.SphereVector = RandomPointInSphere_Func_Output_Ouput;
	float3 Result77 = abs(Context.MapSpawn.Local.SphereLocation.SphereVector);
	float3 CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output;
	CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(Context.MapSpawn.SphereLocation.HemisphereX, Context.MapSpawn.SphereLocation.HemisphereY, Context.MapSpawn.SphereLocation.HemisphereZ, CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output);
	float3 Result78 = lerp(Context.MapSpawn.Local.SphereLocation.SphereVector,Result77,CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output);
	Context.MapSpawn.Local.SphereLocation.SphereVector = Result78;
	float3 Result79 = Context.MapSpawn.Constants.Emitter.SphereLocation.SphereRadius * Context.MapSpawn.Local.SphereLocation.SphereVector * Context.MapSpawn.Constants.Emitter.SphereLocation.NonUniformScale;
	Context.MapSpawn.Local.SphereLocation.SphereVector = Result79;
	float3 Result80 = Context.MapSpawn.SphereLocation.SphereOrigin + Context.MapSpawn.Constants.Emitter.SphereLocation.Offset;
	int Constant122 = 0;
	bool Constant123 = true;
	float3 SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	SphereLocation_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Local.SphereLocation.SphereVector, Context.MapSpawn.SphereLocation.CoordinateSpace, Constant122, Constant123, SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result82 = Result80 + SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	float3 Result83 = normalize(SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector);
	Context.MapSpawn.Particles.Position = Result82;
	Context.MapSpawn.OUTPUT_VAR.SphereLocation.SphereNormal = Result83;
}

void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context)
{
	int Constant129 = 0;
	bool Constant130 = false;
	int Mode_IfResult5;
	bool Override_IfResult5;
	if(Context.MapSpawn.UniformRangedVector.OverrideRandomness)
	{
	Mode_IfResult5 = Context.MapSpawn.UniformRangedVector.RandomnessMode;
	Override_IfResult5 = Context.MapSpawn.UniformRangedVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult5 = Constant129;
	Override_IfResult5 = Constant130;
	}
	float3 RandomRangeFloat_Func_Output_Result6;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedVector.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedVector.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedVector.RandomSeed, Mode_IfResult5, Override_IfResult5, Context.MapSpawn.UniformRangedVector.FixedRandomSeed, RandomRangeFloat_Func_Output_Result6, Context);
	Out_UniformRangedVector = RandomRangeFloat_Func_Output_Result6;
}

void AddVelocity_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant134 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant134, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result85 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult8;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult8 = In_InVector;
	}
	else
	{
	Vector_IfResult8 = Result85;
	}
	Out_OutVector = Vector_IfResult8;
}

void AddVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result84 = Context.MapSpawn.AddVelocity.Velocity * Context.MapSpawn.Constants.Emitter.AddVelocity.ScaleAddedVelocity;
	int Constant132 = 0;
	bool Constant133 = false;
	float3 AddVelocity_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocity_TransformVector_Emitter_Func_(Result84, Context.MapSpawn.AddVelocity.CoordinateSpace, Constant132, Constant133, AddVelocity_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result86 = AddVelocity_TransformVector_Emitter_Func_Output_OutVector + Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Velocity = Result86;
}

void GravityForce001_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result87 = Context.MapSpawn.Constants.Emitter.GravityForce001.Gravity * Context.MapSpawn.Particles.Mass;
	float3 Result88 = Context.MapSpawn.Transient.PhysicsForce + Result87;
	Context.MapSpawn.Transient.PhysicsForce = Result88;
}

void ApplyInitialForces_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant140 = 1e-06;
	float Result89 = max(Context.MapSpawn.Particles.Mass, Constant140);
	float3 Result90 = Context.MapSpawn.Transient.PhysicsForce / Result89;
	float3 Result91 = Result90 + Context.MapSpawn.Particles.Velocity;
	float3 Velocity_IfResult;
	if(Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity)
	{
	Velocity_IfResult = Result91;
	}
	else
	{
	Velocity_IfResult = Context.MapSpawn.Particles.Velocity;
	}
	float Constant141 = 1e-06;
	float Result92 = max(Context.MapSpawn.Particles.RotationalInertia, Constant141);
	float3 Result93 = Context.MapSpawn.Transient.PhysicsRotationalForce / Result92;
	float3 Result94 = Context.MapSpawn.Particles.RotationalVelocity + Result93;
	float3 Constant142 = float3(0,0,0);
	float3 RotVelocity_IfResult;
	float3 RotationalForce_IfResult;
	if(Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity)
	{
	RotVelocity_IfResult = Result94;
	RotationalForce_IfResult = Constant142;
	}
	else
	{
	RotVelocity_IfResult = Context.MapSpawn.Particles.RotationalVelocity;
	RotationalForce_IfResult = Context.MapSpawn.Transient.PhysicsRotationalForce;
	}
	float3 Result95 = Context.MapSpawn.Transient.PhysicsForce * Context.MapSpawn.Constants.Emitter.ApplyInitialForces.PositionalForceWarmupTime;
	float3 Result96 = Context.MapSpawn.Particles.Position + Result95;
	float3 Position_IfResult;
	if(Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition)
	{
	Position_IfResult = Result96;
	}
	else
	{
	Position_IfResult = Context.MapSpawn.Particles.Position;
	}
	bool Result97 = Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity || Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition;
	float3 Constant143 = float3(0,0,0);
	float3 Force_IfResult;
	if(Result97)
	{
	Force_IfResult = Constant143;
	}
	else
	{
	Force_IfResult = Context.MapSpawn.Transient.PhysicsForce;
	}
	Context.MapSpawn.Particles.Velocity = Velocity_IfResult;
	Context.MapSpawn.Particles.RotationalVelocity = RotVelocity_IfResult;
	Context.MapSpawn.Particles.Position = Position_IfResult;
	Context.MapSpawn.Transient.PhysicsForce = Force_IfResult;
	Context.MapSpawn.Transient.PhysicsRotationalForce = RotationalForce_IfResult;
	Context.MapSpawn.OUTPUT_VAR.ApplyInitialForces.IncomingPhysicsForce = Context.MapSpawn.Transient.PhysicsForce;
	Context.MapSpawn.OUTPUT_VAR.ApplyInitialForces.IncomingPhysicsRotationalForce = Context.MapSpawn.Transient.PhysicsRotationalForce;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result98 = length(In_V);
	bool Result99 = NiagaraAll(Result98 < In_Threshold);
	float Result100 = length(In_Fallback);
	float3 Vector_IfResult9;
	float float_IfResult;
	if(Result99)
	{
	Vector_IfResult9 = In_Fallback;
	float_IfResult = In_FallbackLength;
	}
	else
	{
	Vector_IfResult9 = In_V;
	float_IfResult = Result98;
	}
	float3 Result101 = Vector_IfResult9 / float_IfResult;
	float3 Vector_IfResult10;
	float float_IfResult1;
	if(Result99)
	{
	Vector_IfResult10 = In_Fallback;
	float_IfResult1 = Result100;
	}
	else
	{
	Vector_IfResult10 = Result101;
	float_IfResult1 = float_IfResult;
	}
	Out_Direction = Vector_IfResult10;
	Out_Length = float_IfResult1;
	Out_BelowThreshold = Result99;
}

void InitialMeshOrientation_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant150 = false;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult3 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult4 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal3;
	float4x4 TransformBase_Func_Output_OutTransform3;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant150, TransformBase_Func_Output_bUseOriginal3, TransformBase_Func_Output_OutTransform3, Context);
	float3 Result102 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult11;
	if(TransformBase_Func_Output_bUseOriginal3)
	{
	Vector_IfResult11 = In_InVector;
	}
	else
	{
	Vector_IfResult11 = Result102;
	}
	Out_OutVector = Vector_IfResult11;
}

void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result)
{



		float NormAB = 1.0f;
	    float NormFactor = sqrt((In_From.x*In_From.x + In_From.y*In_From.y + In_From.z*In_From.z) * (In_To.x*In_To.x + In_To.y*In_To.y + In_To.z*In_To.z));

	    if (In_InputsAreNormalized)
	    {
	         NormAB = 1.0f;
	    }
	    else
	    {
	         NormAB = NormFactor;
	   }

		float w = NormAB + dot(In_From, In_To);
	    float4 Result1 = float4(In_From.y * In_To.z - In_From.z * In_To.y,
						   In_From.z * In_To.x - In_From.x * In_To.z,
						   In_From.x * In_To.y - In_From.y * In_To.x,
						   w);
		float4 Result2 = float4(-In_From.z, 0.0f, In_From.x, 0.0f);
	    float4 Result3 = float4(0.0f, -In_From.z, In_From.y, 0.0f);


	    if (abs(In_From.x) > abs(In_From.y))
	    {
	        Out_Result = Result2;
	    }
	    else
	    {
	        Out_Result = Result3;
	    }


		if (w >= 3.4e-4f * NormAB)
		{

			Out_Result = Result1;
		}

		Out_Result = normalize(Out_Result);

}

void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context)
{
	float4 CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
	CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(In_InputsAreNormalized, In_From, In_To, CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result);
	Out_NewOutput = CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
}

void AxisAngleToQuaternion_Func_(float4 In_AxisAngle, bool In_NormalizeAxis, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float3 VECTOR_VAR;
	float NiagaraFloat;
	VECTOR_VAR.x = In_AxisAngle.x;
	VECTOR_VAR.y = In_AxisAngle.y;
	VECTOR_VAR.z = In_AxisAngle.z;
	NiagaraFloat = In_AxisAngle.w;
	float3 Result107 = normalize(VECTOR_VAR);
	float3 Vector_IfResult12;
	if(In_NormalizeAxis)
	{
	Vector_IfResult12 = Result107;
	}
	else
	{
	Vector_IfResult12 = VECTOR_VAR;
	}
	float Constant167 = 2;
	float Result108 = NiagaraFloat / Constant167;
	float Result109 = sin(Result108);
	float3 Result110 = Vector_IfResult12 * Result109;
	float Result111 = cos(Result108);
	float4 Output3;
	Output3.x = Result110.x;
	Output3.y = Result110.y;
	Output3.z = Result110.z;
	Output3.w = Result111;
	Out_Quaternion = Output3;
}

void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result)
{

float4 SIGN_MASK0 = float4( 1.f, -1.f, 1.f, -1.f );
	float4 SIGN_MASK1 = float4( 1.f, 1.f, -1.f, -1.f );
	float4 SIGN_MASK2 = float4( -1.f, 1.f, 1.f, -1.f );
	Out_Result = (In_Quat1.wwww * In_Quat2);
	Out_Result = ((In_Quat1.xxxx * In_Quat2.wzyx) * SIGN_MASK0) + Out_Result;
	Out_Result = ((In_Quat1.yyyy * In_Quat2.zwxy)* SIGN_MASK1) + Out_Result;
	Out_Result = ((In_Quat1.zzzz * In_Quat2.yxwz)* SIGN_MASK2) + Out_Result;
}

void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float4 CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
	CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(In_QuaternionA, In_QuaternionB, CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result);
	Out_Quaternion = CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
}

void ApplyRotationVector_NormalizeRotations_true_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context)
{
	float Result103 = TWO_PI;
	float3 Result104 = In_RotationalVelocityVector * In_DeltaTime;
	float3 Result105 = Result103 * Result104;
	float3 Constant160 = float3(0,0,0);
	float Constant161 = 1e-05;
	float Constant162 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(Result105, Constant160, Constant161, Constant162, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	float Constant163 = -1;
	float Constant164 = -1;
	float Constant165 = 1;
	float3 Output15;
	Output15.x = Constant163;
	Output15.y = Constant164;
	Output15.z = Constant165;
	float3 Result106 = DirectionAndLengthSafe_Func_Output_Direction2 * Output15;
	float4 Vector4;
	Vector4.x = Result106.x;
	Vector4.y = Result106.y;
	Vector4.z = Result106.z;
	Vector4.w = DirectionAndLengthSafe_Func_Output_Length2;
	bool Constant166 = true;
	float4 AxisAngleToQuaternion_Func_Output_Quaternion;
	AxisAngleToQuaternion_Func_(Vector4, Constant166, AxisAngleToQuaternion_Func_Output_Quaternion, Context);
	float4 MultiplyQuaternion_Func_Output_Quaternion;
	MultiplyQuaternion_Func_(AxisAngleToQuaternion_Func_Output_Quaternion, In_ExistingOrientationQuat, MultiplyQuaternion_Func_Output_Quaternion, Context);
	float4 Quat_IfResult;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold2)
	{
	Quat_IfResult = In_ExistingOrientationQuat;
	}
	else
	{
	Quat_IfResult = MultiplyQuaternion_Func_Output_Quaternion;
	}
	Out_NewOrientationQuat = Quat_IfResult;
}

void InitialMeshOrientation_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Constant145 = float3(1,0,0);
	float Constant146 = 1e-05;
	float Constant147 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationAxis, Constant145, Constant146, Constant147, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	int Constant148 = 0;
	bool Constant149 = false;
	float3 InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector;
	InitialMeshOrientation_TransformVector_Emitter_Func_(DirectionAndLengthSafe_Func_Output_Direction, Context.MapSpawn.InitialMeshOrientation.OrientationCoordinateSpace, Constant148, Constant149, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, Context);
	int Constant151 = 0;
	bool Constant152 = false;
	float3 InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector1;
	InitialMeshOrientation_TransformVector_Emitter_Func_(Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationVector, Context.MapSpawn.InitialMeshOrientation.OrientationCoordinateSpace, Constant151, Constant152, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector1, Context);
	float Constant153 = 1e-05;
	float Constant154 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector1, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, Constant153, Constant154, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	bool Constant155 = false;
	float4 FindQuatBetween_Func_Output_NewOutput;
	FindQuatBetween_Func_(InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, DirectionAndLengthSafe_Func_Output_Direction1, Constant155, FindQuatBetween_Func_Output_NewOutput, Context);
	int Constant156 = 0;
	int Constant157 = 0;
	bool Constant158 = false;
	float3 InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector2;
	InitialMeshOrientation_TransformVector_Emitter_Func_(Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.Rotation, Constant156, Constant157, Constant158, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector2, Context);
	float Constant159 = 1;
	float4 ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat;
	ApplyRotationVector_NormalizeRotations_true_Func_(InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector2, Constant159, Context.MapSpawn.Particles.MeshOrientation, ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat, Context);
	float4 MultiplyQuaternion_Func_Output_Quaternion1;
	MultiplyQuaternion_Func_(FindQuatBetween_Func_Output_NewOutput, ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat, MultiplyQuaternion_Func_Output_Quaternion1, Context);
	Context.MapSpawn.Particles.InitialRotation = MultiplyQuaternion_Func_Output_Quaternion1;
	Context.MapSpawn.Particles.MeshOrientation = MultiplyQuaternion_Func_Output_Quaternion1;
	Context.MapSpawn.InitialMeshOrientation.OrientationVector = Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationVector;
	bool Constant168 = false;
	Context.MapSpawn.Local.InitialMeshOrientation.Temp = Constant168;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result112 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result112;
	float Result113 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant170 = 1e-05;
	float Result114 = max(Context.MapUpdate.ParticleState.Lifetime, Constant170);
	float Constant171 = 0.0001;
	float Result115 = Result114 - Constant171;
	bool Result116 = NiagaraAll(Result113 < Result115);
	bool Constant172 = false;
	bool bool_IfResult;
	if(Result116)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant172;
	}
	float Result117 = Result113 / Result114;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result113;
	Context.MapUpdate.Particles.NormalizedAge = Result117;
}

void Drag_Emitter_Func_(inout FSimulationContext Context)
{
	float Result118 = Context.MapUpdate.Constants.Emitter.Drag.Drag + Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Transient.PhysicsDrag = Result118;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Context.MapUpdate.Transient.PhysicsRotationalDrag;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value;
	SampleCurve_EmitterValueScaleFactorFloatCurve(Context.MapUpdate.FloatFromCurve.CurveIndex, SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value);
	float Result119 = SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result119;
}

void Vector2DFromFloat_Emitter_Func_(out float2 Out_Vec2, inout FSimulationContext Context)
{
	float2 Output16;
	Output16.x = Context.MapUpdate.Vector2DFromFloat.Value;
	Output16.y = Context.MapUpdate.Vector2DFromFloat.Value;
	Out_Vec2 = Output16;
}

void SpriteSizeScale_Emitter_Func_(inout FSimulationContext Context)
{
	float2 Result120 = Context.MapUpdate.SpriteSizeScale.ScaleFactor * Context.MapUpdate.Transient.SpriteSizeScaleFactor;
	float2 Result121 = Context.MapUpdate.SpriteSizeScale.InitialSpriteSize * Result120;
	Context.MapUpdate.Particles.SpriteSize = Result121;
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Result120;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve(Context.MapUpdate.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value);
	float Result122 = SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result122;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output0;
	Output0.r = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output0.g = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output0.b = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output0.a = Context.MapUpdate.ScaleColor.ScaleAlpha;
	float4 Result123 = Context.MapUpdate.Transient.ParticleColorScaleFactor * Output0;
	float4 Result124 = Context.MapUpdate.ScaleColor.ColorValueToScale * Result123;
	Context.MapUpdate.Particles.Color = Result124;
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Result123;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result125 = Context.MapUpdate.Constants.Emitter.GravityForce.Gravity * Context.MapUpdate.Particles.Mass;
	float3 Result126 = Context.MapUpdate.Transient.PhysicsForce + Result125;
	Context.MapUpdate.Transient.PhysicsForce = Result126;
}

void WindForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result127 = Context.MapUpdate.Constants.Emitter.WindForce.WindSpeed * Context.MapUpdate.Constants.Emitter.WindForce.WindSpeedScale;
	float Result128 = 1 - Context.MapUpdate.Constants.Emitter.WindForce.AirResistance;
	float Constant182 = 0;
	float Constant183 = 1;
	float Result129 = clamp(Result128,Constant182,Constant183);
	float3 Result130 = Result127 * Result129;
	Context.MapUpdate.Local.WindForce.RawWindForce = Result127;
	Context.MapUpdate.Local.WindForce.WindForce = Result130;
	float3 Constant184 = float3(0,0,1e-06);
	float Constant185 = 1e-05;
	float Constant186 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction3;
	float DirectionAndLengthSafe_Func_Output_Length3;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold3;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Local.WindForce.RawWindForce, Constant184, Constant185, Constant186, DirectionAndLengthSafe_Func_Output_Direction3, DirectionAndLengthSafe_Func_Output_Length3, DirectionAndLengthSafe_Func_Output_BelowThreshold3, Context);
	float3 Constant187 = float3(0,0,1e-06);
	float Constant188 = 1e-05;
	float Constant189 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction4;
	float DirectionAndLengthSafe_Func_Output_Length4;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold4;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Particles.Velocity, Constant187, Constant188, Constant189, DirectionAndLengthSafe_Func_Output_Direction4, DirectionAndLengthSafe_Func_Output_Length4, DirectionAndLengthSafe_Func_Output_BelowThreshold4, Context);
	float Result131 = dot(DirectionAndLengthSafe_Func_Output_Direction3,DirectionAndLengthSafe_Func_Output_Direction4);
	float Result132 = Result131 * DirectionAndLengthSafe_Func_Output_Length4;
	bool Result133 = NiagaraAll(DirectionAndLengthSafe_Func_Output_Length3 > Result132);
	float3 Constant190 = float3(0,0,0);
	float3 WindForce_IfResult;
	if(Result133)
	{
	WindForce_IfResult = Context.MapUpdate.Local.WindForce.WindForce;
	}
	else
	{
	WindForce_IfResult = Constant190;
	}
	Context.MapUpdate.Local.WindForce.WindForce = WindForce_IfResult;
	Context.MapUpdate.OUTPUT_VAR.WindForce.IsAffectedByWind = Result133;
	float3 Result134 = Context.MapUpdate.Transient.PhysicsForce + Context.MapUpdate.Local.WindForce.WindForce;
	Context.MapUpdate.Transient.PhysicsForce = Result134;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant198 = 0.0001;
	float Result135 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant198);
	float Result136 = Reciprocal(Result135);
	float3 Result137 = Result136 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result137;
	float3 Result138 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant199 = 0;
	float Result139 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant199);
	float Result140 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result139;
	float Constant200 = 1;
	float Result141 = Result140 + Constant200;
	float3 Result142 = Result138 / Result141;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result142;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result143 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result143;
	float3 Position_IfResult1;
	float3 Velocity_IfResult1;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult1 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult1 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult1 = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult1 = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult1;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult1;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant201 = float3(0,0,0);
	float Constant202 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant201;
	Drag_IfResult = Constant202;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float3 Constant7 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant7;
	float3 Constant8 = float3(0,0,0);
	Context.MapSpawn.Particles.RotationalVelocity = Constant8;
	float Constant9 = 1;
	Context.MapSpawn.Particles.RotationalInertia = Constant9;
	float4 Constant10 = float4(0,0,0,1);
	Context.MapSpawn.Particles.MeshOrientation = Constant10;
	float4 Constant11 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.InitialRotation = Constant11;
	float Constant12 = 0;
	Context.MapSpawn.Particles.Age = Constant12;
	float Constant13 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant13;

	bool Constant14 = false;
	bool Constant15 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideRandomness = Constant14;
	Context.MapSpawn.UniformRangedFloat004.OverrideRandomness = Constant15;
	int Constant16 = 0;
	Context.MapSpawn.UniformRangedFloat004.RandomnessMode = Constant16;
	bool Constant17 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideSeed = Constant17;
	bool Constant18 = false;
	Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed = Constant18;
	float UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat004_Emitter_Func_(UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat, Context);
	int Constant33 = 0;
	Context.MapSpawn.UniformRangedFloat005.RandomnessMode = Constant33;
	bool Constant34 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideSeed = Constant34;
	bool Constant35 = false;
	Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed = Constant35;
	float UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat005_Emitter_Func_(UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.Vector2DFromFloat002.Value = UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.NormalizedAngleToDegrees001.NormalizedAngle = UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	bool Constant38 = false;
	Context.MapSpawn.UniformRangedFloat002.OverrideRandomness = Constant38;
	int Constant39 = 0;
	Context.MapSpawn.UniformRangedFloat002.RandomnessMode = Constant39;
	bool Constant40 = false;
	Context.MapSpawn.UniformRangedFloat002.OverrideSeed = Constant40;
	bool Constant41 = false;
	Context.MapSpawn.UniformRangedFloat002.FixedRandomSeed = Constant41;
	float UniformRangedFloat002_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat002_Emitter_Func_(UniformRangedFloat002_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant44 = true;
	bool Constant45 = true;
	bool Constant46 = true;
	float2 Vector2DFromFloat002_Emitter_Func_Output_Vec2;
	Vector2DFromFloat002_Emitter_Func_(Vector2DFromFloat002_Emitter_Func_Output_Vec2, Context);
	float NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput;
	NormalizedAngleToDegrees001_Emitter_Func_(NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput, Context);
	bool Constant48 = false;
	bool Constant49 = false;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	bool Constant52 = false;
	bool Constant53 = true;
	Context.MapSpawn.InitializeParticle.Lifetime = UniformRangedFloat002_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant44;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant45;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant46;
	Context.MapSpawn.InitializeParticle.SpriteSize = Vector2DFromFloat002_Emitter_Func_Output_Vec2;
	Context.MapSpawn.InitializeParticle.SpriteRotation = NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant48;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant52;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant53;
	bool Constant54 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant54;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant57 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant57;
	float Constant58 = 0;
	float Constant59 = 1;
	int Constant60 = -1;
	int Constant61 = 0;
	bool Constant62 = false;
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Constant58, Constant59, Constant60, Constant61, Constant62, RandomRangeFloat_Func_Output_Result3, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result3;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant68 = false;
	Context.MapSpawn.BoxLocation.OverrideRandomness = Constant68;
	int Constant69 = 0;
	Context.MapSpawn.BoxLocation.RandomnessMode = Constant69;
	bool Constant70 = false;
	Context.MapSpawn.BoxLocation.OverrideSeed = Constant70;
	int Constant71 = 0;
	Context.MapSpawn.BoxLocation.SurfaceExpansionMode = Constant71;
	bool Constant72 = false;
	Context.MapSpawn.BoxLocation.FixedRandomSeed = Constant72;
	float3 Constant73 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.BoxLocation.BoxVector = Constant73;
	Context.MapSpawn.BoxLocation.BoxOrigin = Context.MapSpawn.Particles.Position;
	int Constant74 = 2;
	Context.MapSpawn.BoxLocation.CoordinateSpace = Constant74;
	EnterStatScope(2 );
	BoxLocation_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant101 = false;
	Context.MapSpawn.SphereLocation.OverrideRandomness = Constant101;
	int Constant102 = 0;
	Context.MapSpawn.SphereLocation.RandomnessMode = Constant102;
	bool Constant103 = false;
	Context.MapSpawn.SphereLocation.OverrideSeed = Constant103;
	int Constant104 = 0;
	Context.MapSpawn.SphereLocation.SurfaceExpansionMode = Constant104;
	bool Constant105 = true;
	Context.MapSpawn.SphereLocation.NormalizeThickness = Constant105;
	bool Constant106 = false;
	Context.MapSpawn.SphereLocation.FixedRandomSeed = Constant106;
	float3 Constant107 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.SphereLocation.SphereVector = Constant107;
	bool Constant108 = false;
	Context.MapSpawn.SphereLocation.HemisphereX = Constant108;
	bool Constant109 = false;
	Context.MapSpawn.SphereLocation.HemisphereY = Constant109;
	bool Constant110 = false;
	Context.MapSpawn.SphereLocation.HemisphereZ = Constant110;
	Context.MapSpawn.SphereLocation.SphereOrigin = Context.MapSpawn.Particles.Position;
	int Constant111 = 2;
	Context.MapSpawn.SphereLocation.CoordinateSpace = Constant111;
	EnterStatScope(3 );
	SphereLocation_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant125 = false;
	Context.MapSpawn.UniformRangedVector.OverrideRandomness = Constant125;
	int Constant126 = 0;
	Context.MapSpawn.UniformRangedVector.RandomnessMode = Constant126;
	bool Constant127 = false;
	Context.MapSpawn.UniformRangedVector.OverrideSeed = Constant127;
	bool Constant128 = false;
	Context.MapSpawn.UniformRangedVector.FixedRandomSeed = Constant128;
	float3 UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	UniformRangedVector_Emitter_Func_(UniformRangedVector_Emitter_Func_Output_UniformRangedVector, Context);
	Context.MapSpawn.AddVelocity.Velocity = UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	int Constant131 = 2;
	Context.MapSpawn.AddVelocity.CoordinateSpace = Constant131;
	EnterStatScope(4 );
	AddVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant135 = float3(0,0,0);
	Context.MapSpawn.Transient.PhysicsForce = Constant135;
	EnterStatScope(5 );
	GravityForce001_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant136 = true;
	Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity = Constant136;
	bool Constant137 = false;
	Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition = Constant137;
	bool Constant138 = true;
	Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity = Constant138;
	float3 Constant139 = float3(0,0,0);
	Context.MapSpawn.Transient.PhysicsRotationalForce = Constant139;
	EnterStatScope(6 );
	ApplyInitialForces_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant144 = 0;
	Context.MapSpawn.InitialMeshOrientation.OrientationCoordinateSpace = Constant144;
	EnterStatScope(7 );
	InitialMeshOrientation_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Initial.SpriteSize = Context.MapSpawn.Particles.SpriteSize;

	Context.MapSpawn.Particles.Initial.Color = Context.MapSpawn.Particles.Color;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant169 = true;
	Context.MapUpdate.DataInstance.Alive = Constant169;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(8 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant173 = false;
	int Constant174 = (0);
	float Constant175 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant175;
	float Constant176 = 0;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Constant176;
	EnterStatScope(9 );
	Drag_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Vector2DFromFloat.Value = FloatFromCurve_Emitter_Func_Output_Value;
	float2 Vector2DFromFloat_Emitter_Func_Output_Vec2;
	Vector2DFromFloat_Emitter_Func_(Vector2DFromFloat_Emitter_Func_Output_Vec2, Context);
	Context.MapUpdate.SpriteSizeScale.ScaleFactor = Vector2DFromFloat_Emitter_Func_Output_Vec2;
	Context.MapUpdate.SpriteSizeScale.InitialSpriteSize = Context.MapUpdate.Particles.Initial.SpriteSize;
	float2 Constant177 = float2(1,1);
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Constant177;
	EnterStatScope(10 );
	SpriteSizeScale_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleColor.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleColor.ColorValueToScale = Context.MapUpdate.Particles.Initial.Color;
	float4 Constant178 = float4(1,1,1,1);
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Constant178;
	EnterStatScope(11 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant179 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant179;
	EnterStatScope(12 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant180 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.WindForce.RawWindForce = Constant180;
	float3 Constant181 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.WindForce.WindForce = Constant181;
	EnterStatScope(13 );
	WindForce_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant191 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant191;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant192 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant192;
	float3 Constant193 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant193;
	float Constant194 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant194;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	bool Constant195 = false;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant196 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant196;
	bool Constant197 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant197;
	EnterStatScope(14 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(15 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.r = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.g = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.b = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.x = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.y = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.z = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.w = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.x = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.y = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.z = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.w = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.RotationalInertia = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.x = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.y = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum = Constants_Emitter_UniformRangedFloat004_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum = Constants_Emitter_UniformRangedFloat004_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed = Constants_Emitter_UniformRangedFloat004_RandomSeed;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum = Constants_Emitter_UniformRangedFloat005_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum = Constants_Emitter_UniformRangedFloat005_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed = Constants_Emitter_UniformRangedFloat005_RandomSeed;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.Minimum = Constants_Emitter_UniformRangedFloat002_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.Maximum = Constants_Emitter_UniformRangedFloat002_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.RandomSeed = Constants_Emitter_UniformRangedFloat002_RandomSeed;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Constants.Emitter.BoxLocation.RandomSeed = Constants_Emitter_BoxLocation_RandomSeed;
	Context.MapSpawn.Constants.Emitter.BoxLocation.SurfaceOnlyBandThickness = Constants_Emitter_BoxLocation_SurfaceOnlyBandThickness;
	Context.MapSpawn.Constants.Emitter.BoxLocation.BoxSize = Constants_Emitter_BoxLocation_BoxSize;
	Context.MapSpawn.Constants.Emitter.BoxLocation.BoxOffset = Constants_Emitter_BoxLocation_BoxOffset;
	Context.MapSpawn.Constants.Emitter.BoxLocation.NormalizedBoxRotationAngle = Constants_Emitter_BoxLocation_NormalizedBoxRotationAngle;
	Context.MapSpawn.Constants.Emitter.BoxLocation.RotateBoxOnAxis = Constants_Emitter_BoxLocation_RotateBoxOnAxis;
	Context.MapSpawn.Constants.Emitter.BoxLocation.SpawnGroupMask = Constants_Emitter_BoxLocation_SpawnGroupMask;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Constants.Emitter.SphereLocation.RandomSeed = Constants_Emitter_SphereLocation_RandomSeed;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SurfaceOnlyBandThickness = Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SphereRadius = Constants_Emitter_SphereLocation_SphereRadius;
	Context.MapSpawn.Constants.Emitter.SphereLocation.NonUniformScale = Constants_Emitter_SphereLocation_NonUniformScale;
	Context.MapSpawn.Constants.Emitter.SphereLocation.Offset = Constants_Emitter_SphereLocation_Offset;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SpawnGroupMask = Constants_Emitter_SphereLocation_SpawnGroupMask;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.Minimum = Constants_Emitter_UniformRangedVector_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.Maximum = Constants_Emitter_UniformRangedVector_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.RandomSeed = Constants_Emitter_UniformRangedVector_RandomSeed;
	Context.MapSpawn.Constants.Emitter.AddVelocity.ScaleAddedVelocity = Constants_Emitter_AddVelocity_ScaleAddedVelocity;
	Context.MapSpawn.Constants.Emitter.GravityForce001.Gravity = Constants_Emitter_GravityForce001_Gravity;
	Context.MapSpawn.Constants.Emitter.ApplyInitialForces.PositionalForceWarmupTime = Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationVector = Constants_Emitter_InitialMeshOrientation_OrientationVector;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationAxis = Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.Rotation = Constants_Emitter_InitialMeshOrientation_Rotation;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.Drag.Drag = Constants_Emitter_Drag_Drag;
	Context.MapUpdate.Constants.Emitter.Drag.RotationalDrag = Constants_Emitter_Drag_RotationalDrag;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.MapUpdate.Constants.Emitter.GravityForce.Gravity = Constants_Emitter_GravityForce_Gravity;
	Context.MapUpdate.Constants.Emitter.WindForce.WindSpeed = Constants_Emitter_WindForce_WindSpeed;
	Context.MapUpdate.Constants.Emitter.WindForce.WindSpeedScale = Constants_Emitter_WindForce_WindSpeedScale;
	Context.MapUpdate.Constants.Emitter.WindForce.AirResistance = Constants_Emitter_WindForce_AirResistance;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.r);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.g);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.b);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.a);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.x);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.y);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.x);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.y);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.z);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.w);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.x);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.y);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.z);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.w);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.RotationalInertia);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.y);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.z);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 39, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
